package rkgrpcextension

import (
	"context"
	"github.com/rookie-ninja/rk-common/common"
	"github.com/rookie-ninja/rk-grpc/interceptor/basic"
	"github.com/rookie-ninja/rk-grpc/interceptor/context"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"time"
)

// Add common headers as extension style in http response.
// The key is defined as bellow:
// 1: X-<Prefix>-Request-Id: Request id generated by interceptor.
// 2: X-<Prefix-App: Application name.
// 3: X-<Prefix>-App-Version: Version of application.
// 4: X-<Prefix>-App-Unix-Time: Unix time of current application.
// 5: X-<Prefix>-Request-Received-Time: Time of current request received by application.
func UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {
	set := newOptionSet(rkgrpcbasic.RpcTypeUnaryServer, opts...)

	return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
		requestId := rkcommon.GenerateRequestId()
		rkgrpcctx.AddToOutgoingMD(ctx, set.RequestIdKey, requestId)
		event := rkgrpcctx.GetEvent(ctx)
		event.SetRequestId(requestId)
		event.SetEventId(requestId)

		// Add request Id to logger
		rkgrpcctx.GetPayload(ctx)
		rkgrpcctx.SetLogger(ctx, rkgrpcctx.GetLogger(ctx).With(zap.String("requestId", requestId)))

		rkgrpcctx.AddToOutgoingMD(ctx, set.AppNameKey, set.AppNameValue)
		rkgrpcctx.AddToOutgoingMD(ctx, set.AppVersionKey, set.AppVersionValue)

		now := time.Now()
		rkgrpcctx.AddToOutgoingMD(ctx, set.AppUnixTimeKey, now.Format(time.RFC3339Nano))
		rkgrpcctx.AddToOutgoingMD(ctx, set.ReceivedTimeKey, now.Format(time.RFC3339Nano))

		return handler(ctx, req)
	}
}

// Add common headers as extension style in http response.
// The key is defined as bellow:
// 1: X-<Prefix>-Request-Id: Request id generated by interceptor.
// 2: X-<Prefix-App: Application name.
// 3: X-<Prefix>-App-Version: Version of application.
// 4: X-<Prefix>-App-Unix-Time: Unix time of current application.
// 5: X-<Prefix>-Request-Received-Time: Time of current request received by application.
func StreamServerInterceptor(opts ...Option) grpc.StreamServerInterceptor {
	set := newOptionSet(rkgrpcbasic.RpcTypeStreamServer, opts...)

	return func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {
		// Before invoking
		wrappedStream := rkgrpcctx.WrapServerStream(stream)
		ctx := wrappedStream.WrappedContext

		requestId := rkcommon.GenerateRequestId()
		rkgrpcctx.AddToOutgoingMD(ctx, set.RequestIdKey, requestId)
		event := rkgrpcctx.GetEvent(ctx)
		event.SetRequestId(requestId)
		event.SetEventId(requestId)

		// Add request Id to logger
		rkgrpcctx.GetPayload(ctx)
		rkgrpcctx.SetLogger(ctx, rkgrpcctx.GetLogger(ctx).With(zap.String("requestId", requestId)))

		rkgrpcctx.AddToOutgoingMD(ctx, set.AppNameKey, set.AppNameValue)
		rkgrpcctx.AddToOutgoingMD(ctx, set.AppVersionKey, set.AppVersionValue)

		now := time.Now()
		rkgrpcctx.AddToOutgoingMD(ctx, set.AppUnixTimeKey, now.Format(time.RFC3339Nano))
		rkgrpcctx.AddToOutgoingMD(ctx, set.ReceivedTimeKey, now.Format(time.RFC3339Nano))

		return handler(srv, wrappedStream)
	}
}

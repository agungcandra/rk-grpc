// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rk_grpc_common_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RkCommonServiceClient is the client API for RkCommonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RkCommonServiceClient interface {
	// Healthy stub
	Healthy(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// GC stub
	Gc(ctx context.Context, in *GcRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// Info stub
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// Config Stub
	Configs(ctx context.Context, in *ConfigsRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// List API Stub
	Apis(ctx context.Context, in *ApisRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// Sys Stub
	Sys(ctx context.Context, in *SysRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// Req Stub
	Req(ctx context.Context, in *ReqRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// Entries Stub
	Entries(ctx context.Context, in *EntriesRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// Certs Stub
	Certs(ctx context.Context, in *CertsRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	// Logs Stub
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
}

type rkCommonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRkCommonServiceClient(cc grpc.ClientConnInterface) RkCommonServiceClient {
	return &rkCommonServiceClient{cc}
}

func (c *rkCommonServiceClient) Healthy(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Healthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Gc(ctx context.Context, in *GcRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Gc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Configs(ctx context.Context, in *ConfigsRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Configs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Apis(ctx context.Context, in *ApisRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Apis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Sys(ctx context.Context, in *SysRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Sys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Req(ctx context.Context, in *ReqRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Req", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Entries(ctx context.Context, in *EntriesRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Entries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Certs(ctx context.Context, in *CertsRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Certs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkCommonServiceClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, "/rk.api.v1.RkCommonService/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RkCommonServiceServer is the server API for RkCommonService service.
// All implementations should embed UnimplementedRkCommonServiceServer
// for forward compatibility
type RkCommonServiceServer interface {
	// Healthy stub
	Healthy(context.Context, *HealthyRequest) (*structpb.Struct, error)
	// GC stub
	Gc(context.Context, *GcRequest) (*structpb.Struct, error)
	// Info stub
	Info(context.Context, *InfoRequest) (*structpb.Struct, error)
	// Config Stub
	Configs(context.Context, *ConfigsRequest) (*structpb.Struct, error)
	// List API Stub
	Apis(context.Context, *ApisRequest) (*structpb.Struct, error)
	// Sys Stub
	Sys(context.Context, *SysRequest) (*structpb.Struct, error)
	// Req Stub
	Req(context.Context, *ReqRequest) (*structpb.Struct, error)
	// Entries Stub
	Entries(context.Context, *EntriesRequest) (*structpb.Struct, error)
	// Certs Stub
	Certs(context.Context, *CertsRequest) (*structpb.Struct, error)
	// Logs Stub
	Logs(context.Context, *LogsRequest) (*structpb.Struct, error)
}

// UnimplementedRkCommonServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRkCommonServiceServer struct {
}

func (UnimplementedRkCommonServiceServer) Healthy(context.Context, *HealthyRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthy not implemented")
}
func (UnimplementedRkCommonServiceServer) Gc(context.Context, *GcRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gc not implemented")
}
func (UnimplementedRkCommonServiceServer) Info(context.Context, *InfoRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedRkCommonServiceServer) Configs(context.Context, *ConfigsRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configs not implemented")
}
func (UnimplementedRkCommonServiceServer) Apis(context.Context, *ApisRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apis not implemented")
}
func (UnimplementedRkCommonServiceServer) Sys(context.Context, *SysRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sys not implemented")
}
func (UnimplementedRkCommonServiceServer) Req(context.Context, *ReqRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Req not implemented")
}
func (UnimplementedRkCommonServiceServer) Entries(context.Context, *EntriesRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entries not implemented")
}
func (UnimplementedRkCommonServiceServer) Certs(context.Context, *CertsRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certs not implemented")
}
func (UnimplementedRkCommonServiceServer) Logs(context.Context, *LogsRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}

// UnsafeRkCommonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RkCommonServiceServer will
// result in compilation errors.
type UnsafeRkCommonServiceServer interface {
	mustEmbedUnimplementedRkCommonServiceServer()
}

func RegisterRkCommonServiceServer(s *grpc.Server, srv RkCommonServiceServer) {
	s.RegisterService(&_RkCommonService_serviceDesc, srv)
}

func _RkCommonService_Healthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Healthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Healthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Healthy(ctx, req.(*HealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Gc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Gc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Gc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Gc(ctx, req.(*GcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Configs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Configs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Configs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Configs(ctx, req.(*ConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Apis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Apis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Apis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Apis(ctx, req.(*ApisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Sys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Sys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Sys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Sys(ctx, req.(*SysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Req_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Req(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Req",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Req(ctx, req.(*ReqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Entries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Entries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Entries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Entries(ctx, req.(*EntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Certs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Certs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Certs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Certs(ctx, req.(*CertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkCommonService_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkCommonServiceServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rk.api.v1.RkCommonService/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkCommonServiceServer).Logs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RkCommonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rk.api.v1.RkCommonService",
	HandlerType: (*RkCommonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthy",
			Handler:    _RkCommonService_Healthy_Handler,
		},
		{
			MethodName: "Gc",
			Handler:    _RkCommonService_Gc_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _RkCommonService_Info_Handler,
		},
		{
			MethodName: "Configs",
			Handler:    _RkCommonService_Configs_Handler,
		},
		{
			MethodName: "Apis",
			Handler:    _RkCommonService_Apis_Handler,
		},
		{
			MethodName: "Sys",
			Handler:    _RkCommonService_Sys_Handler,
		},
		{
			MethodName: "Req",
			Handler:    _RkCommonService_Req_Handler,
		},
		{
			MethodName: "Entries",
			Handler:    _RkCommonService_Entries_Handler,
		},
		{
			MethodName: "Certs",
			Handler:    _RkCommonService_Certs_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _RkCommonService_Logs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/rk_common_service.proto",
}

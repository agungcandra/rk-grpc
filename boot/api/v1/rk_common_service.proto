syntax = "proto3";

package rk.api.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";

option go_package = "rk/api/v1/rk_grpc_common_v1";

service RkCommonService {
    // Get application healthy status
    rpc Healthy(HealthyRequest) returns (google.protobuf.Struct) {};

    // Trigger Gc
    rpc Gc(GcRequest) returns (google.protobuf.Struct) {};

    // Get application and process info
    rpc Info(InfoRequest) returns (google.protobuf.Struct) {};

    // List ConfigEntry
    rpc Configs(ConfigsRequest) returns (google.protobuf.Struct) {};

    // List API
    rpc Apis(ApisRequest) returns (google.protobuf.Struct) {};

    // Get OS Stat
    rpc Sys(SysRequest) returns (google.protobuf.Struct) {};

    // List prometheus metrics of requests
    rpc Req(ReqRequest) returns (google.protobuf.Struct) {};

    // List all Entry
    rpc Entries(EntriesRequest) returns (google.protobuf.Struct) {};

    // List CertEntry
    rpc Certs(CertsRequest) returns (google.protobuf.Struct) {};

    // List logger related entries
    rpc Logs(LogsRequest) returns (google.protobuf.Struct) {};

    // List dependencies related application
    rpc Deps(DepsRequest) returns (google.protobuf.Struct) {};

    // Get license related application
    rpc License(LicenseRequest) returns (google.protobuf.Struct) {};

    // List dependencies related application
    rpc Readme(ReadmeRequest) returns (google.protobuf.Struct) {};

    // List grpc error to grpc-gateway error mappings.
    rpc GwErrorMapping(GwErrorMappingRequest) returns (google.protobuf.Struct) {};
}

message HealthyRequest {}

message GcRequest {}

message InfoRequest {}

message ConfigsRequest {}

message ApisRequest {}

message SysRequest {}

message ReqRequest {}

message EntriesRequest {}

message CertsRequest {}

message LogsRequest {}

message DepsRequest {}

message LicenseRequest {}

message ReadmeRequest {}

message GwErrorMappingRequest {}